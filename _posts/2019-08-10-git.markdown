---
layout:     post
title:      "git-flow"
subtitle:   " \"git-flow实践\""
date:       2019-08-10 11:00:00
author:     "xiaofeng"
header-img: "img/WechatIMG14.jpeg"
tags:
    - git 
    - 技术
    - git-flow
    - 规范
---


### git介绍

#### 基础

Git 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统（CVS，Subversion 等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容。如下图：

![](https://tva1.sinaimg.cn/large/007S8ZIlly1gdwqkrd6avj30dw06774s.jpg)

Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。

这是 Git 同其他系统的重要区别。它完全颠覆了传统版本控制的套路，并对各个环节的实现方式作了新的设计。Git 更像是个小型的文件系统，但它同时还提供了许多以此为基础的超强工具，而不只是一个简单的 VCS。Git工作方式如下图：

![](https://tva1.sinaimg.cn/large/007S8ZIlly1gdwqla7ylej30dw0660te.jpg)

在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 SVN 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。举个例子，如果要浏览项目的历史更新摘要，Git 不用跑到外面的服务器上去取数据回来，而直接从本地数据库读取后展示给你看。所以任何时候你都可以马上翻阅，无需等待。如果想要看当前版本的文件和一个月前的版本之间有何差异，Git 会取出一个月前的快照和当前文件作一次差异运算，而不用请求远程服务器来做这件事，或是把老版本的文件拉到本地来作比较。

#### 文件状态

在保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git 一无所知。这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git 都能立即察觉。Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符（0-9 及 a-f）组成。Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。指纹字符串类如下类似：commit ：fa3f01eb06e1548a1083ffc63f8d20ee970e45c6

#### 工作区域

对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。

基本的 Git 工作流程如下：

* 工作目录中修改某些文件。
* 对修改后的文件进行快照，然后保存到暂存区域。
* 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。

![](https://tva1.sinaimg.cn/large/007S8ZIlly1gdwqoif3ncj30dw0cs3zb.jpg)

### 常用命令

1、新建

```
#新建项目
git init [project-name]

#clone项目
git clone [url]
```

2、配置

```
[user]
    email = 123@123.cn
    name = 2124
[alias]
    st = status
    ck = checkout
    br = branch
    co = commit
[core]
    autocrlf = input
[push]
    default = simple
[color]
|   ui = true
```

3、增加和删除

```
#增加文件
git add [files] [files2]

#删除文件
git rm [file1] [file2]
```

4、提交代码

```
git commit -a -m [message]
```

5、分支

```
#查看
git branch

#切换分支
git checkout [branch]

#合并分支
git merge [branch]
```

6、查看信息

```
#变更文件
git status

#查看历史
git log -p

#查看暂存区和工作区的差异
git diff
```

7、撤销

```
#恢复暂存区文件到工作区
git checkout [file1] [checkout]

#重置暂存区文件，与上一次commit一致
git reset [file1]

```

### git hook

可以自定义脚本，这里写了一个语法校验的钩子。

```
cp .git/hooks/pre-commit.sample .git/hooks/pre-commit

# To enable this hook, rename this file to "pre-commit".

for i in `git status |grep -e 修改 -e 'new file'| awk -F"：" '{print $2}'`
do
    # echo `php -l $i`
    if test -e "$i";then
        php -l $i
    fi
done

```

### git-flow

git-flow为了解决多人协同开发问题而诞生工具，主要有两个特点：

项目存在两个长期分支。

* 主分支：master    - 存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的版本。

* 开发分支：dev     -  用于日常开发，存放最新的开发版本。

项目存在三个短期分支。分支完成开发工作，就会被删除。

* 功能分支：feature branch
  
* 补丁分支：hotfix branch
  
* 预发布分支：release branch

![](https://tva1.sinaimg.cn/large/007S8ZIlly1gdwsk1muvxj30gz0mn412.jpg)

常用命令

![](https://tva1.sinaimg.cn/large/007S8ZIlly1gdwt2xcjbjj30h809haap.jpg)



参考：

[Pro Git](https://gitee.com/progit/index.html)

[git-flow 备忘清单](http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html)

